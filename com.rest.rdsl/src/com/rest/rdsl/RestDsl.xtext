grammar com.xtext.rest.rdsl.RestDsl with org.eclipse.xtext.common.Terminals

generate restDsl "http://www.xtext.com/rest/rdsl/RestDsl"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

RESTModel: 
	globalTratis = GlobalTratis
	security = RESTSecurity  
	dispatcher = DispatcherResource 
	states += RESTState+  
	(globalTransition += RESTTransistions+)?
;

RESTState:
	SingleResource | CollectionResource
;

DispatcherResource:
	'Dispatcher with base URI' basePath = URL
	'{'
		'link to' '{' targetResources += [RESTState] (',' targetResources += [RESTState])* '}'
	'}'
;

SingleResource:
	'State' name = ID ('bound to' boundedTo = [SingleResource])? (traits = SingleResourceTraits)?
	'{'
		(permission = Permission)?
		resources += ResourceView+
		transactions = RESTTransistions
	'}'
;

CollectionResource:	
	'State' name = ID  traits=CollectionResourceTraits
	'{'
		(permission = Permission)?
		transactions = RESTTransistions
	'}'
;

ResourceView:
	'View' type = [UserProfile]
	'{'
		attributes += Attribute+  //For every other attribute then id the method musst look like Path("{id}/attributename)
	'}'
;

SingleResourceTraits:
	hasExtra?='with extra' caching = Caching
;

CollectionResourceTraits:
	isCollection?='as collection of ' collectionOf = [SingleResource] 
	(extra = Extra)?
;

GlobalTratis:
	'Global Tratis'
	'{'
		'API-Version v=' apiVersion = VERSION
		(isMIME?='representation of type' mimeType = MIME)?
		(isIdType?='with id type' idtype = ID_GEN)?
		(isCustomHeader?='Custom Headers' headers+=Header+)?
		(dabaseConig = DatabaseConfiguration)?
	'}'
;

AttributeTrait:
	querable?='querable'
;

Header:
	name = HEADER_STRING ('Description' description = STRING)? 'default value=' value = STRING
;

Extra:
	Pagination | Caching
;


Pagination:
	isPagination?='with paging type ' paging = OffsetPagination | CursorPagination
;

CursorPagination:
	isCursor?='cursor with default size ' elementsCount = INT
;

OffsetPagination:
	isOffset?='offset with default size' elementsCount = INT
;

Caching:
	isCaching?='with caching type' type = CACHING_TYPE ('seconds' time = TIME)?
;

Permission:
	'Permission'
	'{'
		permissionProfile += PermissionProfile+
	'}'
;

PermissionProfile:
		name = [UserProfile]  ('override with methods' allowedMethods += HTTPMETHOD+ (',' allowedMethods += HTTPMETHOD+)* )?
;

RESTSecurity:
	'Security'
	'{'
		settings = SecuritySettings
		users += UserProfile+
	'}'
;

SecuritySettings:
	'Secure through' securityTpe =  Auth
;

UserProfile: 
	'Profile name' name = ID
	'apply to methods' allowedMethods += HTTPMETHOD+
;

RESTTransistions:
	'Transitions' name = ID
	'{'
		transitions += Transition+
	'}'
;

Transition:
	startTransition = SingleStartTransition 'link to' targetTransition = TargetTransition
 ;

TargetTransition:
	SingleTargetTransition | CollectionTargetTransistion
;

SingleStartTransition:
	startMethod = HTTPMETHOD ':' startResource = [RESTState] ('.' startAttribute = [Attribute])?
;

SingleTargetTransition:
	endMethod = HTTPMETHOD ':' endResource = [RESTState] ('.' startAttribute = [Attribute])?
;

CollectionTargetTransistion:
	'{' collectionTransitions += SingleTargetTransition (',' collectionTransitions += SingleTargetTransition)* '}'
;

DatabaseConfiguration:
	'Database Configuration'
	'{'
		SQLDB | NOSQLDB
	'}'
;

NOSQLDB:
	'TODO' todo= INT
;

SQLDB returns DatabaseConfiguration:
	'JDBC-Driver' jdbcCon = (STRING | "org.sqlite.JDBC")
	'JDBC-File' jdbcFile = (STRING  | "jdbc:sqlite:mydatabase.db")
;

Attribute: value = Reference name = ID (trait = AttributeTrait)?;

Reference: JavaReference | ResourceReference;
ResourceReference :	'Resource' resourceRef = [SingleResource]; 
JavaReference: 'Java' javaDataType = PrimitiveType;

PrimitiveType:
	dataType = Datatype ('(' start =  ( FLOAT | STRING) '...' stop = ( FLOAT | STRING) ')')? (context = Context)?
;

FQN:ID ("." ID)*; 

enum Auth: HTTPBasic | OAuth2 ;
enum Context: EMAIL="email" | URL='url' | INTERNAL='internal' ;
enum Datatype: STRING='String' | INT='Int' | LONG='Long' | FLOAT='Float';
enum CACHING_TYPE: ETAG = 'ETag' | MODIFIED = 'Last-Modified' | EXPIRES = 'Expires' | MAXAGE='Max-Age' | DEFAULT = 'Default' | NONE = 'None';
enum MIME : JSON = 'json' | XML = 'xml';
enum ID_GEN: LONG = 'long' |  UUID = 'uuid' | STRING = 'string';
enum HTTPMETHOD : GET | PUT | POST | PATCH | DELETE  | HEAD  | OPTIONS;
terminal URL: 'http' 's'?  '://' ID+ ('.' ID+)*;
terminal HEADER_STRING: 'x-'ID('-'ID)*;
terminal VERSION: ('1'..'9');
terminal TIME: ('1'..'9')+;
terminal FLOAT: (INT+'.'INT+);
