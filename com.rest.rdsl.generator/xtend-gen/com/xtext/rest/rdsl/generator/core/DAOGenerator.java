package com.xtext.rest.rdsl.generator.core;

import com.google.common.base.Objects;
import com.xtext.rest.rdsl.generator.ResourceTypeCollection;
import com.xtext.rest.rdsl.generator.resources.internal.ExceptionDescription;
import com.xtext.rest.rdsl.generator.resources.internal.ExceptionMapper;
import com.xtext.rest.rdsl.management.Constants;
import com.xtext.rest.rdsl.management.ExtensionMethods;
import com.xtext.rest.rdsl.management.Naming;
import com.xtext.rest.rdsl.management.PackageManager;
import com.xtext.rest.rdsl.restDsl.Attribute;
import com.xtext.rest.rdsl.restDsl.Configuration;
import com.xtext.rest.rdsl.restDsl.ResourceType;
import com.xtext.rest.rdsl.restDsl.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class DAOGenerator {
  private final IFileSystemAccess fsa;
  
  private final Configuration config;
  
  private final ExceptionMapper mapper;
  
  private final ResourceTypeCollection resourceCol;
  
  private final String idDataType;
  
  @Extension
  private ExtensionMethods e = new ExtensionMethods();
  
  public DAOGenerator(final IFileSystemAccess fsa, final ResourceTypeCollection resourceCol, final Configuration config) {
    this.fsa = fsa;
    this.config = config;
    this.resourceCol = resourceCol;
    ExceptionMapper _exceptionMapper = new ExceptionMapper(config);
    this.mapper = _exceptionMapper;
    String _iDDataTyp = this.e.getIDDataTyp(config);
    this.idDataType = _iDDataTyp;
  }
  
  public void generateInterface() {
    List<ResourceType> _resources = this.resourceCol.getResources();
    for (final ResourceType res : _resources) {
      String _mainPackage = Constants.getMainPackage();
      String _plus = (_mainPackage + Constants.DAOPACKAGE);
      String _plus_1 = (_plus + "/");
      String _plus_2 = (_plus_1 + "I");
      String _name = res.getName();
      String _plus_3 = (_plus_2 + _name);
      String _plus_4 = (_plus_3 + "DAO");
      String _plus_5 = (_plus_4 + Constants.JAVA);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      String _databasePackage = PackageManager.getDatabasePackage();
      _builder.append(_databasePackage, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import ");
      String _objectPackage = PackageManager.getObjectPackage();
      _builder.append(_objectPackage, "");
      _builder.append(".*;");
      _builder.newLineIfNotEmpty();
      _builder.append("import ");
      String _classImport = Naming.CLASS_DB_QUERY.getClassImport();
      _builder.append(_classImport, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("import java.util.List;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public interface I");
      String _name_1 = res.getName();
      _builder.append(_name_1, "");
      _builder.append("DAO{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public boolean save(");
      String _name_2 = res.getName();
      _builder.append(_name_2, "\t");
      _builder.append(" ");
      String _name_3 = res.getName();
      String _lowerCase = _name_3.toLowerCase();
      _builder.append(_lowerCase, "\t");
      _builder.append(") throws Exception;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public boolean update(");
      String _name_4 = res.getName();
      _builder.append(_name_4, "\t");
      _builder.append(" ");
      String _name_5 = res.getName();
      String _lowerCase_1 = _name_5.toLowerCase();
      _builder.append(_lowerCase_1, "\t");
      _builder.append(", ");
      _builder.append(this.idDataType, "\t");
      _builder.append(" id) throws Exception;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public ");
      String _name_6 = res.getName();
      _builder.append(_name_6, "\t");
      _builder.append(" load(");
      _builder.append(this.idDataType, "\t");
      _builder.append(" id) throws Exception;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public boolean delete(");
      _builder.append(this.idDataType, "\t");
      _builder.append(" id) throws Exception;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public List<");
      String _name_7 = res.getName();
      _builder.append(_name_7, "\t");
      _builder.append("> list(");
      _builder.append(Naming.CLASS_DB_QUERY, "\t");
      _builder.append(" query) throws Exception;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public int count(DBQuery dbquery) throws Exception;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this.fsa.generateFile(_plus_5, _builder);
    }
  }
  
  public void generateDAOs() {
    List<ResourceType> _resources = this.resourceCol.getResources();
    for (final ResourceType res : _resources) {
      {
        String _name = res.getName();
        final String objectName = _name.toLowerCase();
        String updateString = ((((((("id = \'\"" + "+") + objectName) + ".") + Naming.METHOD_NAME_ID_GET) + "()") + "+") + "\"\'\"");
        String createString = "";
        Iterable<Attribute> _attributes = this.e.getAttributes(res);
        final Function1<Attribute,Boolean> _function = new Function1<Attribute,Boolean>() {
          public Boolean apply(final Attribute it) {
            boolean _isList = it.isList();
            return Boolean.valueOf((!_isList));
          }
        };
        Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(_attributes, _function);
        for (final Attribute attrib : _filter) {
          Type _type = this.e.getType(attrib);
          if ((_type instanceof ResourceType)) {
            String _name_1 = attrib.getName();
            String _firstUpper = StringExtensions.toFirstUpper(_name_1);
            String _plus = ((("(" + objectName) + ".get") + _firstUpper);
            String _plus_1 = (_plus + "() != null ? ");
            String _plus_2 = (_plus_1 + objectName);
            String _plus_3 = (_plus_2 + ".get");
            String _name_2 = attrib.getName();
            String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
            String _plus_4 = (_plus_3 + _firstUpper_1);
            String _plus_5 = (_plus_4 + "()");
            String _plus_6 = (_plus_5 + ".");
            String _plus_7 = (_plus_6 + Naming.METHOD_NAME_ID_GET);
            final String nullcheck = (_plus_7 + "() : null)");
            createString = ((((((createString + " + ") + "\",\'\"") + " + ") + nullcheck) + " + ") + "\"\'\"");
            String _name_3 = attrib.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
            String _plus_8 = ((("(" + objectName) + ".get") + _firstUpper_2);
            String _plus_9 = (_plus_8 + "() != null ? ");
            String _plus_10 = (_plus_9 + "\"\'\"");
            String _plus_11 = (_plus_10 + " + ");
            String _plus_12 = (_plus_11 + objectName);
            String _plus_13 = (_plus_12 + ".get");
            String _name_4 = attrib.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
            String _plus_14 = (_plus_13 + _firstUpper_3);
            String _plus_15 = (_plus_14 + "().");
            String _plus_16 = (_plus_15 + Naming.METHOD_NAME_ID_GET);
            String _plus_17 = (_plus_16 + "()");
            String _plus_18 = (_plus_17 + " + ");
            String _plus_19 = (_plus_18 + "\"\'\"");
            final String nullcheckExt = (_plus_19 + " : null)");
            String _name_5 = attrib.getName();
            String _plus_20 = (((updateString + " + ") + "\", ") + _name_5);
            String _plus_21 = (_plus_20 + "_id");
            String _plus_22 = (_plus_21 + " = \"");
            String _plus_23 = (_plus_22 + " + ");
            String _plus_24 = (_plus_23 + nullcheckExt);
            updateString = _plus_24;
          }
        }
        String _mainPackage = Constants.getMainPackage();
        String _plus_25 = (_mainPackage + Constants.DAOPACKAGE);
        String _plus_26 = (_plus_25 + "/");
        String _name_6 = res.getName();
        String _plus_27 = (_plus_26 + _name_6);
        String _plus_28 = (_plus_27 + "DAO");
        String _plus_29 = (_plus_28 + Constants.JAVA);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("package ");
        String _databasePackage = PackageManager.getDatabasePackage();
        _builder.append(_databasePackage, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("import ");
        String _objectPackage = PackageManager.getObjectPackage();
        _builder.append(_objectPackage, "");
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
        _builder.append("import java.util.List;");
        _builder.newLine();
        _builder.append("import java.sql.Statement;");
        _builder.newLine();
        _builder.append("import java.sql.SQLException;");
        _builder.newLine();
        _builder.append("import java.sql.ResultSet;");
        _builder.newLine();
        _builder.append("import java.sql.Connection;");
        _builder.newLine();
        _builder.append("import org.apache.log4j.Logger;");
        _builder.newLine();
        _builder.append("import ");
        String _classImport = Naming.CLASS_JSONCOL_QUERY.getClassImport();
        _builder.append(_classImport, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          ResourceType _userResource = this.resourceCol.getUserResource();
          boolean _notEquals = (!Objects.equal(_userResource, null));
          if (_notEquals) {
            _builder.append("import ");
            String _classImport_1 = Naming.CLASS_USER_AUTH_DATA.getClassImport();
            _builder.append(_classImport_1, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("import ");
            String _exceptionPackage = PackageManager.getExceptionPackage();
            _builder.append(_exceptionPackage, "");
            _builder.append(".");
            ExceptionDescription _get = this.mapper.get(Integer.valueOf(401));
            String _name_7 = _get.getName();
            _builder.append(_name_7, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("import ");
            String _exceptionPackage_1 = PackageManager.getExceptionPackage();
            _builder.append(_exceptionPackage_1, "");
            _builder.append(".");
            ExceptionDescription _get_1 = this.mapper.get(Integer.valueOf(403));
            String _name_8 = _get_1.getName();
            _builder.append(_name_8, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.newLine();
        _builder.append("public class ");
        String _name_9 = res.getName();
        _builder.append(_name_9, "");
        _builder.append("DAO implements I");
        String _name_10 = res.getName();
        _builder.append(_name_10, "");
        _builder.append("DAO{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private final ");
        _builder.append(Naming.CLASS_SQLITE, "\t");
        _builder.append(" sqlite;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("private static final Logger LOGGER = Logger.getLogger( ");
        String _name_11 = res.getName();
        String _firstUpper_4 = StringExtensions.toFirstUpper(_name_11);
        _builder.append(_firstUpper_4, "\t");
        _builder.append("DAO.class );");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_12 = res.getName();
        _builder.append(_name_12, "\t");
        _builder.append("DAO(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("sqlite = ");
        _builder.append(Naming.CLASS_SQLITE, "\t\t");
        _builder.append(".getInstance();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public boolean save(");
        String _name_13 = res.getName();
        _builder.append(_name_13, "\t");
        _builder.append(" ");
        _builder.append(objectName, "\t");
        _builder.append(") throws Exception{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Connection con = null;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("con = sqlite.getConnection();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("Statement stmt = con.createStatement();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("String insert = \"INSERT INTO ");
        String _name_14 = res.getName();
        String _lowerCase = _name_14.toLowerCase();
        _builder.append(_lowerCase, "\t\t\t");
        _builder.append(" VALUES(\'\" + ");
        _builder.append(objectName, "\t\t\t");
        _builder.append(".");
        _builder.append(Naming.METHOD_NAME_ID_GET, "\t\t\t");
        _builder.append("() + \"\'\" ");
        _builder.append(createString, "\t\t\t");
        _builder.append(" + \")\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("stmt.executeUpdate(insert);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("return true;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}catch(SQLException ex){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage());");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}finally{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (con != null){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("try { con.close( );  }");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("catch ( Exception ex ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public boolean update(");
        String _name_15 = res.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        _builder.append(objectName, "\t");
        _builder.append(", ");
        String _iDDataTyp = this.e.getIDDataTyp(this.config);
        _builder.append(_iDDataTyp, "\t");
        _builder.append(" id) throws Exception{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Connection con = null;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("con = sqlite.getConnection();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("Statement stmt = con.createStatement();\t");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("String sql = \"UPDATE ");
        String _name_16 = res.getName();
        String _lowerCase_1 = _name_16.toLowerCase();
        _builder.append(_lowerCase_1, "\t\t\t");
        _builder.append(" SET ");
        _builder.append(updateString, "\t\t\t");
        _builder.append(" + \" WHERE ID =\'\" + id + \"\'\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("stmt.executeUpdate(sql);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("return true;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}catch(SQLException ex){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}finally{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (con != null){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("try { con.close( );  }");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("catch ( Exception ex ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_17 = res.getName();
        _builder.append(_name_17, "\t");
        _builder.append(" load(");
        String _iDDataTyp_1 = this.e.getIDDataTyp(this.config);
        _builder.append(_iDDataTyp_1, "\t");
        _builder.append(" id) throws Exception{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Connection con = null;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        String _name_18 = res.getName();
        _builder.append(_name_18, "\t\t\t");
        _builder.append(" ");
        _builder.append(objectName, "\t\t\t");
        _builder.append(" = null; ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("con = sqlite.getConnection();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("Statement stmt = con.createStatement();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("String sqlQuery = \"SELECT * FROM ");
        String _name_19 = res.getName();
        String _lowerCase_2 = _name_19.toLowerCase();
        _builder.append(_lowerCase_2, "\t\t\t");
        _builder.append(" WHERE ID = \'\" +  id + \"\'\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("ResultSet rs = stmt.executeQuery(sqlQuery);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("if(rs.next()){");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append(objectName, "\t\t\t\t\t");
        _builder.append(" = getObject(rs);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("return ");
        _builder.append(objectName, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}catch(SQLException ex){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}finally{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (con != null){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("try { con.close( );  }");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("catch ( Exception ex ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public boolean delete(");
        String _iDDataTyp_2 = this.e.getIDDataTyp(this.config);
        _builder.append(_iDDataTyp_2, "\t");
        _builder.append(" id) throws Exception{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Connection con = null;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("con = sqlite.getConnection();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("Statement stmt = con.createStatement();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("String sqlDelete = \"DELETE FROM ");
        String _name_20 = res.getName();
        String _lowerCase_3 = _name_20.toLowerCase();
        _builder.append(_lowerCase_3, "\t\t\t");
        _builder.append(" WHERE ID = \'\" +  id + \"\'\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("stmt.executeUpdate(sqlDelete);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("return true;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}catch(SQLException ex){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}finally{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (con != null){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("try { con.close( );  }");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("catch ( Exception ex ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public List<");
        String _name_21 = res.getName();
        _builder.append(_name_21, "\t");
        _builder.append("> list(");
        _builder.append(Naming.CLASS_DB_QUERY, "\t");
        _builder.append(" query) throws Exception{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Connection con = null;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("List<");
        String _name_22 = res.getName();
        _builder.append(_name_22, "\t\t\t");
        _builder.append("> list = new ArrayList<");
        String _name_23 = res.getName();
        _builder.append(_name_23, "\t\t\t");
        _builder.append(">(); ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        String _name_24 = res.getName();
        _builder.append(_name_24, "\t\t\t");
        _builder.append(" ");
        _builder.append(objectName, "\t\t\t");
        _builder.append("; ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("con = sqlite.getConnection();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("Statement stmt = con.createStatement();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("String sqlQuery = \"SELECT * FROM \" + query.getTable() + \" \"  + query.getWhere(null) + \" LIMIT \" + query.getLimit() + \" OFFSET \" + query.getOffset();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("ResultSet rs = stmt.executeQuery(sqlQuery);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("while (rs.next()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append(objectName, "\t\t\t\t");
        _builder.append(" = getObject(rs);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("list.add(");
        _builder.append(objectName, "\t\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("return list;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}catch(SQLException ex){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}finally{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (con != null){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("try { con.close( );  }");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("catch ( Exception ex ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public int count(DBQuery dbquery) throws Exception{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Connection con = null;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("con = sqlite.getConnection();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("Statement s = con.createStatement();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("ResultSet r = s.executeQuery(\"SELECT COUNT(*) AS rowcount FROM ");
        String _name_25 = res.getName();
        String _lowerCase_4 = _name_25.toLowerCase();
        _builder.append(_lowerCase_4, "\t\t\t");
        _builder.append(" \" +  dbquery.getWhere(null));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("r.next();");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("int count = r.getInt(\"rowcount\") ;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("return count;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}catch(SQLException ex){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}finally{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (con != null){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("try { con.close( );  }");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("catch ( Exception ex ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw ex;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private ");
        String _name_26 = res.getName();
        _builder.append(_name_26, "\t");
        _builder.append(" getObject(ResultSet rs){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_27 = res.getName();
        _builder.append(_name_27, "\t\t");
        _builder.append(" ");
        _builder.append(objectName, "\t\t");
        _builder.append(" = null;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append(objectName, "\t\t\t");
        _builder.append(" = new ");
        String _name_28 = res.getName();
        _builder.append(_name_28, "\t\t\t");
        _builder.append("( rs.get");
        String _firstUpper_5 = StringExtensions.toFirstUpper(this.idDataType);
        _builder.append(_firstUpper_5, "\t\t\t");
        _builder.append("(\"id\") ) ;");
        _builder.newLineIfNotEmpty();
        {
          Iterable<Attribute> _attributes_1 = this.e.getAttributes(res);
          final Function1<Attribute,Boolean> _function_1 = new Function1<Attribute,Boolean>() {
            public Boolean apply(final Attribute it) {
              boolean _isList = it.isList();
              return Boolean.valueOf((!_isList));
            }
          };
          Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(_attributes_1, _function_1);
          for(final Attribute attrib_1 : _filter_1) {
            {
              Type _type_1 = this.e.getType(attrib_1);
              if ((_type_1 instanceof ResourceType)) {
                _builder.append("\t\t\t");
                _builder.append(this.idDataType, "\t\t\t");
                _builder.append(" id");
                String _name_29 = attrib_1.getName();
                String _lowerCase_5 = _name_29.toLowerCase();
                _builder.append(_lowerCase_5, "\t\t\t");
                _builder.append(" = rs.get");
                String _firstUpper_6 = StringExtensions.toFirstUpper(this.idDataType);
                _builder.append(_firstUpper_6, "\t\t\t");
                _builder.append("(\"");
                String _name_30 = attrib_1.getName();
                _builder.append(_name_30, "\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                Type _type_2 = this.e.getType(attrib_1);
                String resource = ((ResourceType) _type_2).getName();
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                String _firstUpper_7 = StringExtensions.toFirstUpper(resource);
                _builder.append(_firstUpper_7, "\t\t\t");
                _builder.append(" ");
                String _lowerCase_6 = resource.toLowerCase();
                _builder.append(_lowerCase_6, "\t\t\t");
                _builder.append("  = new ");
                String _firstUpper_8 = StringExtensions.toFirstUpper(resource);
                _builder.append(_firstUpper_8, "\t\t\t");
                _builder.append("(id");
                String _name_31 = attrib_1.getName();
                String _lowerCase_7 = _name_31.toLowerCase();
                _builder.append(_lowerCase_7, "\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append(objectName, "\t\t\t");
                _builder.append(".set");
                String _name_32 = attrib_1.getName();
                String _firstUpper_9 = StringExtensions.toFirstUpper(_name_32);
                _builder.append(_firstUpper_9, "\t\t\t");
                _builder.append("(");
                String _lowerCase_8 = resource.toLowerCase();
                _builder.append(_lowerCase_8, "\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("} catch (SQLException ex) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("LOGGER.error(\"SQLException: \" + ex.getMessage()); ");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return ");
        _builder.append(objectName, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        {
          ResourceType _userResource_1 = this.resourceCol.getUserResource();
          boolean _notEquals_1 = (!Objects.equal(_userResource_1, null));
          if (_notEquals_1) {
            _builder.append("public boolean authenticate(");
            _builder.append(Naming.CLASS_USER_AUTH_DATA, "");
            _builder.append(" authClass) throws ");
            ExceptionDescription _get_2 = this.mapper.get(Integer.valueOf(401));
            String _name_33 = _get_2.getName();
            _builder.append(_name_33, "");
            _builder.append(", ");
            ExceptionDescription _get_3 = this.mapper.get(Integer.valueOf(403));
            String _name_34 = _get_3.getName();
            _builder.append(_name_34, "");
            _builder.append("{");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("}");
        _builder.newLine();
        this.fsa.generateFile(_plus_29, _builder);
      }
    }
  }
  
  public void generateDAOAbstract() {
    String _generationLocation = Naming.ABSTRACT_CLASS_DAO.getGenerationLocation();
    String _plus = (_generationLocation + Constants.JAVA);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _databasePackage = PackageManager.getDatabasePackage();
    _builder.append(_databasePackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public abstract class ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "\t");
    _builder.append(" instance = ");
    _builder.append(Naming.CLASS_SQLITEDAO, "\t");
    _builder.append(".getInstance();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "\t");
    _builder.append(" getInstance()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      List<ResourceType> _resources = this.resourceCol.getResources();
      for(final ResourceType res : _resources) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name = res.getName();
        _builder.append(_name, "\t");
        _builder.append("DAO create");
        String _name_1 = res.getName();
        _builder.append(_name_1, "\t");
        _builder.append("DAO(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return instance.create");
        String _name_2 = res.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("DAO();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    this.fsa.generateFile(_plus, _builder);
  }
  
  public void generateSQLiteDAO() {
    String _generationLocation = Naming.CLASS_SQLITEDAO.getGenerationLocation();
    String _plus = (_generationLocation + Constants.JAVA);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _databasePackage = PackageManager.getDatabasePackage();
    _builder.append(_databasePackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(Naming.CLASS_SQLITEDAO, "");
    _builder.append(" extends ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "\t");
    _builder.append(" instance;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "\t");
    _builder.append(" getInstance()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(instance == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("instance = new ");
    _builder.append(Naming.CLASS_SQLITEDAO, "\t\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      List<ResourceType> _resources = this.resourceCol.getResources();
      for(final ResourceType res : _resources) {
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name = res.getName();
        _builder.append(_name, "\t");
        _builder.append("DAO create");
        String _name_1 = res.getName();
        _builder.append(_name_1, "\t");
        _builder.append("DAO(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return new ");
        String _name_2 = res.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("DAO();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    this.fsa.generateFile(_plus, _builder);
  }
  
  public void generateSQLite() {
    final Map<String,String> map = new HashMap<String, String>();
    List<ResourceType> _resources = this.resourceCol.getResources();
    for (final ResourceType res : _resources) {
      {
        String value = (("id " + this.idDataType) + " NOT NULL,");
        Iterable<Attribute> _attributes = this.e.getAttributes(res);
        for (final Attribute attrib : _attributes) {
          Type _type = this.e.getType(attrib);
          if ((_type instanceof ResourceType)) {
            String _name = attrib.getName();
            String _plus = ((value + " ") + _name);
            String _plus_1 = (_plus + "_id ");
            String _lowerCase = this.idDataType.toLowerCase();
            String _plus_2 = (_plus_1 + _lowerCase);
            String _plus_3 = (_plus_2 + ",");
            value = _plus_3;
          }
        }
        boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(value);
        boolean _not = (!_isNullOrEmpty);
        if (_not) {
          int _length = value.length();
          int _minus = (_length - 1);
          String _substring = value.substring(0, _minus);
          value = _substring;
          String _name_1 = res.getName();
          map.put(_name_1, value);
        }
      }
    }
    String _generationLocation = Naming.CLASS_SQLITE.getGenerationLocation();
    String _plus = (_generationLocation + Constants.JAVA);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _databasePackage = PackageManager.getDatabasePackage();
    _builder.append(_databasePackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      List<String> _baseImports = Naming.CLASS_SQLITE.getBaseImports();
      for(final String imp : _baseImports) {
        _builder.append("import ");
        _builder.append(imp, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(" ");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(Naming.CLASS_SQLITE, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Connection connection;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final StringBuffer sb = new StringBuffer();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ");
    _builder.append(Naming.CLASS_SQLITE, "\t");
    _builder.append(" instance;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static ");
    _builder.append(Naming.CLASS_SQLITE, "\t");
    _builder.append(" getInstance(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(instance == null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("instance = new ");
    _builder.append(Naming.CLASS_SQLITE, "\t\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(Naming.CLASS_SQLITE, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("connect();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("createAllTables();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Connection getConnection(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connect();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return connection;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void connect(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class.forName(\"");
    String _jdbcCon = this.config.getJdbcCon();
    _builder.append(_jdbcCon, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("connection = DriverManager.getConnection(\"");
    String _jdbcFile = this.config.getJdbcFile();
    _builder.append(_jdbcFile, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}catch(SQLException ex){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ex.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}catch(ClassNotFoundException e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void createAllTables(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(connection != null){");
    _builder.newLine();
    {
      List<ResourceType> _resources_1 = this.resourceCol.getResources();
      for(final ResourceType res_1 : _resources_1) {
        _builder.append("\t\t");
        _builder.append("createTables");
        String _name = res_1.getName();
        _builder.append(_name, "\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      List<ResourceType> _resources_2 = this.resourceCol.getResources();
      for(final ResourceType res_2 : _resources_2) {
        _builder.append("\t");
        _builder.append("protected void createTables");
        String _name_1 = res_2.getName();
        _builder.append(_name_1, "\t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("Statement stmt = connection.createStatement();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("sb.setLength(0);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("sb.append(\"DROP TABLE IF EXISTS ");
        String _name_2 = res_2.getName();
        String _lowerCase = _name_2.toLowerCase();
        _builder.append(_lowerCase, "\t\t\t");
        _builder.append(";\"); ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("sb.append(\"CREATE TABLE ");
        String _name_3 = res_2.getName();
        String _lowerCase_1 = _name_3.toLowerCase();
        _builder.append(_lowerCase_1, "\t\t\t");
        _builder.append(" (");
        String _name_4 = res_2.getName();
        String _get = map.get(_name_4);
        _builder.append(_get, "\t\t\t");
        _builder.append(" );\"); ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("sb.append(\"PRIMARY KEY (`id`)\");");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("stmt.executeUpdate(sb.toString());");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}catch(Exception ex){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("//Log4j");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void close(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(connection !=null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("connection.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//Log4j");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.fsa.generateFile(_plus, _builder);
  }
  
  public void generateDBQuery() {
    String _generationLocation = Naming.CLASS_DB_QUERY.getGenerationLocation();
    String _plus = (_generationLocation + Constants.JAVA);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packageName = Naming.CLASS_DB_QUERY.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(Naming.CLASS_DB_QUERY, "");
    _builder.append(" extends HashMap<String, Object> {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final long serialVersionUID = 1L;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String where;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String table;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int offset;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int limit;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object put(String name, Object value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(value != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return super.put(name, value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setTable(String resource){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.table = resource;\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getTable(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.table;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getWhere(");
    String _iDDataTyp = this.e.getIDDataTyp(this.config);
    _builder.append(_iDDataTyp, "\t");
    _builder.append(" id){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("String returnValue = \"WHERE \";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(id != null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnValue += (\"ID =\" + id) + \" and \"; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Map.Entry<String, Object> entry : this.entrySet()){");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("String key = entry.getKey();");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("Object value = entry.getValue();");
    _builder.newLine();
    _builder.append("\t   \t\t");
    _builder.append("returnValue += (key + \"=\'\" + value + \"\'\" + \" and \");");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("if(returnValue.endsWith(\" and \")){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("returnValue = returnValue.substring(0, returnValue.length() - 4); //Remove last \"and \"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return  returnValue;");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setOffset(int offset){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.offset = offset;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setLimit(int limit){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.limit = limit;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getOffset(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.offset;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getLimit(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.limit;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.fsa.generateFile(_plus, _builder);
  }
}
