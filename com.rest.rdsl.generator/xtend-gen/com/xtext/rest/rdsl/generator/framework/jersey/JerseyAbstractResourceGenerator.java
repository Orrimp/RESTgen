package com.xtext.rest.rdsl.generator.framework.jersey;

import com.xtext.rest.rdsl.generator.framework.IBaseResourceGenerator;
import com.xtext.rest.rdsl.management.Constants;
import com.xtext.rest.rdsl.management.Naming;
import com.xtext.rest.rdsl.management.PackageManager;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;

@SuppressWarnings("all")
public class JerseyAbstractResourceGenerator implements IBaseResourceGenerator {
  public void generate(final IFileSystemAccess fsa) {
    String _generationLocation = Naming.CLASS_ABSTRACT_RESOURCE.getGenerationLocation();
    String _plus = (_generationLocation + Constants.JAVA);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _resourcePackage = PackageManager.getResourcePackage();
    _builder.append(_resourcePackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Request;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Context;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.UriInfo;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.HttpHeaders;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Link;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import ");
    String _classImport = Naming.CLASS_LINK.getClassImport();
    _builder.append(_classImport, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _classImport_1 = Naming.CLASS_OBJPARENT.getClassImport();
    _builder.append(_classImport_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public abstract class ");
    _builder.append(Naming.CLASS_ABSTRACT_RESOURCE, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Inject information about the URI and its components");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Context");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected UriInfo uriInfo;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Inject content negotiation and preconditions of the reqeust");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Context ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Request request;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Context ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected HttpHeaders headers;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Link[] getLinks(");
    _builder.append(Naming.CLASS_OBJPARENT, "\t");
    _builder.append(" resourceObject){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<");
    _builder.append(Naming.CLASS_LINK, "\t\t");
    _builder.append("> links = resourceObject.getLinks();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Link[] reLinks = new Link[links.size()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i  = 0; i < links.size(); ++i){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("reLinks[i] = Link.fromUri(links.get(i).getURI()).rel(links.get(i).getType()).build();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return reLinks;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(_plus, _builder);
  }
}
