package com.xtext.rest.rdsl.generator.framework.jersey;

import com.xtext.rest.rdsl.generator.resources.internal.ExceptionDescription;
import com.xtext.rest.rdsl.generator.resources.internal.ExceptionMapper;
import com.xtext.rest.rdsl.management.Constants;
import com.xtext.rest.rdsl.management.Naming;
import com.xtext.rest.rdsl.management.PackageManager;
import com.xtext.rest.rdsl.restDsl.RESTConfiguration;
import com.xtext.rest.rdsl.restDsl.RESTResource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;

@SuppressWarnings("all")
public class CustomJerseyFilter {
  private final RESTConfiguration config;
  
  private final IFileSystemAccess fsa;
  
  private RESTResource userResource = null;
  
  public CustomJerseyFilter(final RESTConfiguration config, final IFileSystemAccess fsa, final RESTResource userResource) {
    this.config = config;
    this.fsa = fsa;
    this.userResource = userResource;
  }
  
  public void generateFilter() {
    final ExceptionMapper mapper = new ExceptionMapper(this.config);
    ExceptionDescription ex401 = mapper.get(Integer.valueOf(401));
    ExceptionDescription ex403 = mapper.get(Integer.valueOf(403));
    String _generationLocation = Naming.CLASS_USER_AUTH_FILTER.getGenerationLocation();
    String _plus = (_generationLocation + Constants.JAVA);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packageName = Naming.CLASS_USER_AUTH_FILTER.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    String _exceptionPackage = PackageManager.getExceptionPackage();
    _builder.append(_exceptionPackage, "");
    _builder.append(".*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import javax.ws.rs.ext.Provider;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.HttpHeaders;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response.Status;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.container.ContainerRequestContext;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.container.ContainerRequestFilter;");
    _builder.newLine();
    _builder.append("import ");
    String _objectPackage = PackageManager.getObjectPackage();
    _builder.append(_objectPackage, "");
    _builder.append(".*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _classImport = Naming.CLASS_USER_AUTH_DATA.getClassImport();
    _builder.append(_classImport, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _classImport_1 = Naming.ABSTRACT_CLASS_DAO.getClassImport();
    _builder.append(_classImport_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.rest.rdsl.databsase.");
    String _name = this.userResource.getName();
    _builder.append(_name, "");
    _builder.append("DAO;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Provider");
    _builder.newLine();
    _builder.append("@UserAuthorization");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(Naming.CLASS_USER_AUTH_FILTER, "");
    _builder.append(" implements ContainerRequestFilter {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void filter(ContainerRequestContext requestContext) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String authHeader = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(authHeader == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("requestContext.abortWith(Response.status(Status.BAD_REQUEST)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".header(HttpHeaders.WWW_AUTHENTICATE, \"Basic realm=\\\"realm\\\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".entity(\"Authentication in header missing\").build());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_1 = this.userResource.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("DAO userDAO = ");
    _builder.append(Naming.ABSTRACT_CLASS_DAO, "\t\t");
    _builder.append(".getInstance().create");
    String _name_2 = this.userResource.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("DAO();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append(Naming.CLASS_USER_AUTH_DATA, "\t\t");
    _builder.append(" authClass = new ");
    _builder.append(Naming.CLASS_USER_AUTH_DATA, "\t\t");
    _builder.append("(authHeader);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("userDAO.authenticate(authClass);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch(");
    String _name_3 = ex401.getName();
    _builder.append(_name_3, "\t\t");
    _builder.append(" ex){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("requestContext.abortWith(Response.status(Status.");
    String _statusString = ex401.getStatusString();
    _builder.append(_statusString, "\t\t\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append(".header(HttpHeaders.WWW_AUTHENTICATE, \"Basic realm=\\\"realm\\\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".entity(\"");
    String _developerMessage = ex401.getDeveloperMessage();
    _builder.append(_developerMessage, "\t\t\t");
    _builder.append("\").build());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}catch(");
    String _name_4 = ex403.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" ex){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("requestContext.abortWith(Response.status(Status.");
    String _statusString_1 = ex403.getStatusString();
    _builder.append(_statusString_1, "\t\t\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append(".header(HttpHeaders.WWW_AUTHENTICATE, \"Basic realm=\\\"realm\\\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".entity(\"");
    String _developerMessage_1 = ex403.getDeveloperMessage();
    _builder.append(_developerMessage_1, "\t\t\t");
    _builder.append("\").build());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.fsa.generateFile(_plus, _builder);
  }
}
